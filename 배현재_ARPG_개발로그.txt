[Main Issue]  상호작용 기능 | 인벤토리 기능 & 아이템 활용 기능 & 아이템 DT 관리 | 무기(attack, fire, reload) 기능

[05/13]
◎ 에셋 리스트 작성: 유효한/호환 가능한 에셋 추리고, 필요한 에셋만 다시 검토해야 함
◎ 상호작용 기능 구현 로드맵: 인터페이스 및 Component를 활용하여 모듈화
└ INAInteraction(UInteraction): '상호작용' 기능에 대한 모듈화를 담당, Component 외 다른 계열의 클래스에서도 상호작용 기능이 필요할 때 사용할 수 있어야 함
└ UNAInteractionComponent:
◎ 아이템 인벤토리부터 구현하기!!

[05/14]
◎ 인벤토리 시스템 구현하기 01: 아이템 데이터 만들기 -> 데이터 테이블로 관리
◎ FItemBaseTableRow: 아이템 DT 기반 
◎ 상호작용, 아이템 트리거 박스, 인벤토리에 stack하는 기능: 인터페이스로 빼기?
◎ ANAItemBase에 INAInteraction 구현하기, 아이템 트리거 범위 설정을 위한 UShpereComponent 추가해서 루트로 만들기 -> 이건 선택 가능하도록?
◎ 줍기 가능한 아이템이 있다면 -> ex "E"(줍기) 위젯 계속 띄워두기 (아이템마다 줍기 위젯 설정 x, 유저의 줍기 범위 내 줍기 가능한 아이템이 하나라도 있다면! 줍기 위젯 1개를 계속 띄우기, -> 그렇다면 아이템을 줍기 탐지 범위를 탐색하는 것은 유저 캐릭터에게 넘기기?)
└ 줍기 및 상호작용 가능한 아이템이 활성화되었을 때, 이를 표시하는 위젯은 유저의 화면에서 처리, HUD에서 처리하기 (ex 줍기 가능한 범위 내에서 줍기 위젯 활성, 문처럼 고정된 오브젝트에 상호작용이 활성화된 동안 등)
◎ 소비아이템: ANAConsumableItem : public ANAItemBase
└ 소비아이템에 오브젝트 풀 필요한가..? 고민해보기
◎ 탄약: 소비아이템 소속. 하지만 무기 쪽하고도 연관있음...
└ ANAProjectile: 오브젝트 풀 사용해야함. 근데 오브젝트 풀을 어디에 두지??

※※ 아이템 액터들 콜리전 설정 아직 안함!!! 프로파일 만들고 따로 설정해주기 ※※
[05/16]
아이템 서브시스템 [UNAItemGameInstanceSubsystem]:
└ UItemDataTablesAsset: 아이템 DT를 싹 취합하는 용도로 쓸 예정. UItemDataTablesAsset 데이터 에셋 파일 하나 만들어서, 해당 파일에 아이템 DT 파일들 싹 넣어두기.
└ UNAItemGameInstanceSubsystem::Initialize 단계에서 실행되는 것:
   1) (경로 하드코딩된) UItemDataTablesAsset 파일 동기 로드해서 ItemDataTableSources에 아이템DT 파일 포인터 저장
   2) ItemDataTableSources의 모든 요소의  Row를 순환해서 ItemMetaDataMap 초기화

└ ItemMetaDataMap: 아이템 메타데이터 맵핑용, UClass-DTRowHandle, 클래스로 키값 검색 가능하기 때문에 BP 클래스에 대응 가능
└ 일반 AActor 계열의 객체에서 (CDO 제외) ItemMetaDataMap에 접근하려면 PostInitProperties 호출 시점부터 접근하는걸 추천.
아이템 DT [FNAItemBaseDataTable]: 이거 상속받아서 아이템 DT 세분화 (e.g. FWeaponDataTableRow)
아이템 데이터/껍데기 [UNAItemData/ANAItemInstance]:
└ UNAItemData: final. 아이템에 대한 [가변 데이터 + 메타 데이터]를 아이템 인스턴스별로 관리하기 위한 클래스. ANAItemInstance에 소유됨
└ ANAItemInstance: 아이템의 시각적 구현 담당. ㄹㅇ 껍데기용. (나중에 오브젝트 풀 사용한 최적화 적용할까 고민중) 상호작용 인터페이스 상속시킬 예정. (CDO제외) PostInitProperties 때 UNAItemData 유효성 검사하고 null이면 아이템 서브시스템이 관리하는 아이템 메타데이터 맵에서 아이템 메타 데이터 가져와서 UNAItemData 초기화

◎ NAItemInstance에서 InitItemData 로직 흐름 구성중

[05/18]
◎ UNAItemData, ANAItemInstance 로직 정리 완료
◎ 상호작용 != 아이템 사용: 기능 분리
└ 상호작용: 아이템 인스턴스(껍데기)가 활성화될 때 발생 -> 유저의 인벤토리에 소지된 아이템은 상호작용 X
└ 아이템 사용: 아이템 데이터를 경유하여 발생 -> 아이템 사용으로 인해 아이템 데이터가 바뀜(수량, 상태 등)
	└ 그렇다면 물약을 마시는 행위는? 아이템 사용: 물약 효과가 캐릭터에 적용, 물약 마시는 애니메이션이 있다면 -> 해당 아이템 인스턴스를 release해서 메쉬 시각화(물약 마시는 애니메이션은 캐릭터 쪽에서 처리)
└ 상호작용은 INAInteraction 인터페이스로
└ 아이템 사용은 UNAItemData의 메서드 활용: UNAItemData에 TWeakObjectPtr<T>로 해당 아이템을 소지 중인 객체 추적(Outer 개념x)
◎ ANAPickableItemInstance ->ANAStackableItemInstance: 인벤토리에 여러 개 쌓을 수 있는? 월드에 소환되어 유저의 인벤토리에 복사되는 아이템들. 예를 들면, 일정 시간마다 월드에 리젠될 때마다 계속 주울 수 있는 아이템 

[05/19]
◎ ANAItemInstance: UNAInteraction 구현
└ 구체적인 동작 수행 로직은x(이건 자식 클래스에서 구체화)
└ 유저에게 상호작용 요청을 받아서 상호작용 트리거까지만
◎ UNAInteractionComponent
└ 인터렉터블 여러개를 Tick에서 추적: 가장 가까이에 놓인 인터렉터블 틱마다 갱신(위젯에 출력할 아이템 아이콘 변경을 위함), NearestInteractable에 있는 변수가 상호작용 대상 1순위
◎ ANAPlaceableItemInstance: 맵에 고정되지만 상호작용이 필요한 아이템 오브젝트용 클래스
└ 일단 문 열기/닫기, 레버 및 스위치 등등 맵에 영향을 주는 상호작용 부분 구현

[05/20]
◎ 전역 상호작용 구상하기: 이쪽에서 어떤 조건을 충족하면 저쪽에서 뭔가 트리거됨...
└ 게임 인스턴스에서 전역 상호작용이 필요한 클래스? 객체?들 따로 맵핑하기
◎ ANAPlaceableItemInstance: 레벨에 배치되는 환경 오브젝트, 상호작용 가능함: 문, 레버 등
└ 일단 이것부터 러프하게 구현하기. 레벨 테스트용으로
◎ 위젯 인터렉션 컴포넌트?? 월드에 배치된 위젯과 상호작용 할 수 있음 캐릭터에 붙이기
└ 이걸 인터렉션 컴포넌트의 부모로 둘까? -> 기각. VR 게임에서나 쓸만한듯
◎ 아이템 서브시스템 / 인벤토리 서브시스템 / 플레이어 스테이트 서브시스템 ... : 각자 기능에 따라 별도의 서브시스템으로 나누기
└ 서버 권한에 따라 로직 분기할 필요x
◎ Save&Load 매니저 서브시스템: 각 기능별 서브시스템들에게서 데이터를 받아와서 이를 하나의 USaveGame 컨테이너에 취합하여 저장. 세이브 파일 쓰기/읽기 담당
└ (리슨 서버 기준) 서버 권한에 따라 로직 분기: 호스트 클라(서버)만 세이브/로드를 직접 수행, 게스트 클라는 호스트 클라에게 세이브/로드를 요청. 모든 세이브 파일은 호스트 클라가 소유.

[05/21]
◎ 인벤토리 서브시스템: 여기에서 인벤토리에 아이템 추가/삭제 등의 데이터 관리 및 직렬화/역직렬화에 필요한 데이터 쓰기/읽기
└ 인벤토리 서브시스템에서 플레이어의 인벤토리 정보 관리(add, remove) → 인벤토리 컴포넌트는 인벤토리 서브 시스템에게 add/remove을 요청(접두사 Handle 붙은 메서드들: 인벤토리 서브시스템 함수의 래퍼 함수)
◎ 생각해봤는데 상호작용 컴포넌트나 인벤토리 컴포넌트나 캐릭터가 아니고 플레이어 컨트롤러에 붙이는게 나을듯: 인풋을 직통으로 처리 가능
└ pc에 상호작용 컴포넌트 부착할거면, OnPossess에 AttachToPawn, OnUnPossess에 DetachFromPawn
└ 근데 Attach 안해도 될듯.. 언리얼이 AController에서 트랜스폼 관련 메서드들 죄다 private 처리 해놧음
◎ ANAItemInstance -> ANAItemActor로 리네이밍
◎ **PC에 InventoryComponent와 InventoryWidget을 함께 두기**
└ 인벤토리 컴포넌트와 인벤토리 위젯의 소통은 델리게이트를 통해서만. 최대한 종속성 안생기게
└ 두 객체 사이의 소통에 필요한 델리게이트를 PC에서 바인딩/언바인딩하기
└ PC에서 인벤토리 컴포넌트와 인벤토리 위젯을 관리하면 좋은 점? 멀티플레이어 환경일때, 해당 객체들이 어떤 플레이어(가 빙의중인 폰)의 소유인지 일일히 확인할 필요가 없어짐

[05/22]
◎ 인벤토리 서브시스템에서 제공할 API
└ Add Item
└ Remove Item

(아이템의 Usage에 관한 기능들을 여기서? 아님 아이템 서브시스템에서?)
└ Equip Item: 플레이어 스테이트와 연관됨
└ Unequip Item: 플레이어 스테이트와 연관됨
└ Use Item: 아이템 데이터와 연관됨

◎ 아이템 슬롯
└ 

◎ 인벤토리 컴포넌트의 기능
└ Handle Add Item
└ Handle Remove Item
└ Handle Equip Item
└ Handle Unequip Item
└ Use Item
└ 인벤토리 stack 관련 기능: 인벤토리의 최대 용량, 인벤토리 스택 정리 및 읽기 등
└ 인벤토리 위젯에 broadcast: 렌더링 draw 요청

◎ 아이템 Numeric Data
└ 아이템 데이터의 수량 Quantity: 
	→ 해당 아이템의 현재 수량(반드시 아이템 액터 1개 당 아이템 데이터 수량 1개 x)
	→ 묶음 아이템은 아이템 액터 1개에 아이템 데이터 상의 수량이 여러개일 수 있음 
└ 인벤토리에서의 아이템 수량 / 아이템 묶음 단위 Stack:
	→ 인벤토리 슬롯(칸 1개)에 표시되는 아이템 수량 정보
	→ Max Slot Stack Size: 이 아이템이 인벤토리의 슬롯 1칸에 최대 몇 개까지 들어갈 수 있는가
					0 이면 수량 제한 없음, 1 이상이면 ~ (단 MaxInventoryStackSize보다 항상 작은 값이어야 함)
	→ Max Inventory Stack Size: 인벤토리에 소지 가능한 최대 수량
					    	0이면 수량 제한 없음, 1 이상이면 ~ 
	→ bIsStackable: 소지 가능 여부
└ 아이템 데이터의 Weight:
	→ 인벤토리 슬롯(칸 1개)의 무게의 총합 == 인벤토리 용량
	→ 인벤토리 슬롯 1칸의 무게 = Stack x Item Weight
	→ 인벤토리의 용량을 계산할 때 필요

◎ 인벤토리 연출
└ 데드 스페이스는 인벤토리를 열어도 게임 월드의 시간이 멈추지 않음. 적의 습격을 받을 수 있는 무방비 상태


1. 

